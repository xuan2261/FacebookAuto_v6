/* THIS FILE IS AUTOGENERATED FROM PromiseDebugging.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_PromiseDebuggingBinding_h
#define mozilla_dom_PromiseDebuggingBinding_h

#include "js/RootingAPI.h"
#include "jspubtd.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/CallbackInterface.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/ToJSValue.h"

namespace mozilla {
namespace dom {

struct NativePropertyHooks;
class Promise;
class PromiseDebugging;
struct PromiseDebuggingAtoms;
struct PromiseDebuggingStateHolderAtoms;
class ProtoAndIfaceCache;
class UncaughtRejectionObserver;
struct UncaughtRejectionObserverAtoms;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

enum class PromiseDebuggingState : uint32_t {
  Pending,
  Fulfilled,
  Rejected,
  EndGuard_
};

namespace PromiseDebuggingStateValues {
extern const EnumEntry strings[4];
} // namespace PromiseDebuggingStateValues


struct PromiseDebuggingStateHolder : public DictionaryBase
{
  JS::Value mReason;
  PromiseDebuggingState mState;
  JS::Value mValue;

  PromiseDebuggingStateHolder();

  explicit inline PromiseDebuggingStateHolder(const FastDictionaryInitializer& )
    : mReason(JS::UndefinedValue()),
      mValue(JS::UndefinedValue())
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

private:
  PromiseDebuggingStateHolder(const PromiseDebuggingStateHolder&) = delete;
  void operator=(const PromiseDebuggingStateHolder) = delete;

  static bool
  InitIds(JSContext* cx, PromiseDebuggingStateHolderAtoms* atomsCache);

public:
  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);
};

namespace binding_detail {
struct FastPromiseDebuggingStateHolder : public PromiseDebuggingStateHolder
{
  inline FastPromiseDebuggingStateHolder()
    : PromiseDebuggingStateHolder(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


namespace PromiseDebuggingBinding {

  typedef mozilla::dom::PromiseDebugging NativeType;

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  JSObject*
  DefineDOMInterface(JSContext* aCx, JS::Handle<JSObject*> aGlobal, JS::Handle<jsid> id, bool aDefineOnGlobal);

  bool
  ConstructorEnabled(JSContext* aCx, JS::Handle<JSObject*> aObj);

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  JS::Handle<JSObject*>
  GetConstructorObjectHandle(JSContext* aCx, JS::Handle<JSObject*> aGlobal, bool aDefineOnGlobal = true);

  JSObject*
  GetConstructorObject(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

} // namespace PromiseDebuggingBinding



class UncaughtRejectionObserver : public CallbackInterface
{
public:
  explicit inline UncaughtRejectionObserver(JS::Handle<JSObject*> aCallback, nsIGlobalObject* aIncumbentGlobal)
    : CallbackInterface(aCallback, aIncumbentGlobal)
  {
  }

  void OnLeftUncaught(Promise& p, ErrorResult& aRv, const char* aExecutionReason = nullptr, ExceptionHandling aExceptionHandling = eReportExceptions, JSCompartment* aCompartment = nullptr);

  void OnConsumed(Promise& p, ErrorResult& aRv, const char* aExecutionReason = nullptr, ExceptionHandling aExceptionHandling = eReportExceptions, JSCompartment* aCompartment = nullptr);

  inline bool
  operator==(const UncaughtRejectionObserver& aOther) const
  {
    return CallbackInterface::operator==(aOther);
  }

private:
  static bool
  InitIds(JSContext* cx, UncaughtRejectionObserverAtoms* atomsCache);
};


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_PromiseDebuggingBinding_h
