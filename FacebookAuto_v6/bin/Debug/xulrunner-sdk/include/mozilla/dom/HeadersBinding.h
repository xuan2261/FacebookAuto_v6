/* THIS FILE IS AUTOGENERATED FROM Headers.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_HeadersBinding_h
#define mozilla_dom_HeadersBinding_h

#include "js/RootingAPI.h"
#include "jspubtd.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/BindingUtils.h"
#include "mozilla/dom/MozMap.h"
#include "mozilla/dom/Nullable.h"
#include "mozilla/dom/UnionMember.h"

namespace mozilla {
namespace dom {

class Headers;
struct HeadersAtoms;
struct NativePropertyHooks;
class OwningHeadersOrByteStringSequenceSequenceOrByteStringMozMap;
class ProtoAndIfaceCache;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

enum class HeadersGuardEnum : uint32_t {
  None,
  Request,
  Request_no_cors,
  Response,
  Immutable,
  EndGuard_
};

namespace HeadersGuardEnumValues {
extern const EnumEntry strings[6];
} // namespace HeadersGuardEnumValues


void
ImplCycleCollectionTraverse(nsCycleCollectionTraversalCallback& aCallback, OwningHeadersOrByteStringSequenceSequenceOrByteStringMozMap& aUnion, const char* aName, uint32_t aFlags = 0);


void
ImplCycleCollectionUnlink(OwningHeadersOrByteStringSequenceSequenceOrByteStringMozMap& aUnion);


class HeadersOrByteStringSequenceSequenceOrByteStringMozMap
{
  friend class HeadersOrByteStringSequenceSequenceOrByteStringMozMapArgument;
  enum Type
  {
    eUninitialized,
    eHeaders,
    eByteStringSequenceSequence,
    eByteStringMozMap
  };

  union Value
  {
    UnionMember<NonNull<mozilla::dom::Headers> > mHeaders;
    UnionMember<binding_detail::AutoSequence<Sequence<nsCString>> > mByteStringSequenceSequence;
    UnionMember<MozMap<nsCString> > mByteStringMozMap;

  };

  Type mType;
  Value mValue;

  HeadersOrByteStringSequenceSequenceOrByteStringMozMap(const HeadersOrByteStringSequenceSequenceOrByteStringMozMap&) = delete;
  void operator=(const HeadersOrByteStringSequenceSequenceOrByteStringMozMap) = delete;
public:
  explicit inline HeadersOrByteStringSequenceSequenceOrByteStringMozMap()
    : mType(eUninitialized)
  {
  }

  inline ~HeadersOrByteStringSequenceSequenceOrByteStringMozMap()
  {
    Uninit();
  }

  inline NonNull<mozilla::dom::Headers>&
  RawSetAsHeaders()
  {
    if (mType == eHeaders) {
      return mValue.mHeaders.Value();
    }
    MOZ_ASSERT(mType == eUninitialized);
    mType = eHeaders;
    return mValue.mHeaders.SetValue();
  }

  inline NonNull<mozilla::dom::Headers>&
  SetAsHeaders()
  {
    if (mType == eHeaders) {
      return mValue.mHeaders.Value();
    }
    Uninit();
    mType = eHeaders;
    return mValue.mHeaders.SetValue();
  }

  inline bool
  IsHeaders() const
  {
    return mType == eHeaders;
  }

  inline NonNull<mozilla::dom::Headers>&
  GetAsHeaders()
  {
    MOZ_ASSERT(IsHeaders(), "Wrong type!");
    return mValue.mHeaders.Value();
  }

  inline mozilla::dom::Headers&
  GetAsHeaders() const
  {
    MOZ_ASSERT(IsHeaders(), "Wrong type!");
    return mValue.mHeaders.Value();
  }

  inline binding_detail::AutoSequence<Sequence<nsCString>>&
  RawSetAsByteStringSequenceSequence()
  {
    if (mType == eByteStringSequenceSequence) {
      return mValue.mByteStringSequenceSequence.Value();
    }
    MOZ_ASSERT(mType == eUninitialized);
    mType = eByteStringSequenceSequence;
    return mValue.mByteStringSequenceSequence.SetValue();
  }

  inline binding_detail::AutoSequence<Sequence<nsCString>>&
  SetAsByteStringSequenceSequence()
  {
    if (mType == eByteStringSequenceSequence) {
      return mValue.mByteStringSequenceSequence.Value();
    }
    Uninit();
    mType = eByteStringSequenceSequence;
    return mValue.mByteStringSequenceSequence.SetValue();
  }

  inline bool
  IsByteStringSequenceSequence() const
  {
    return mType == eByteStringSequenceSequence;
  }

  inline binding_detail::AutoSequence<Sequence<nsCString>>&
  GetAsByteStringSequenceSequence()
  {
    MOZ_ASSERT(IsByteStringSequenceSequence(), "Wrong type!");
    return mValue.mByteStringSequenceSequence.Value();
  }

  inline const Sequence<Sequence<nsCString>>&
  GetAsByteStringSequenceSequence() const
  {
    MOZ_ASSERT(IsByteStringSequenceSequence(), "Wrong type!");
    return mValue.mByteStringSequenceSequence.Value();
  }

  inline MozMap<nsCString>&
  RawSetAsByteStringMozMap()
  {
    if (mType == eByteStringMozMap) {
      return mValue.mByteStringMozMap.Value();
    }
    MOZ_ASSERT(mType == eUninitialized);
    mType = eByteStringMozMap;
    return mValue.mByteStringMozMap.SetValue();
  }

  inline MozMap<nsCString>&
  SetAsByteStringMozMap()
  {
    if (mType == eByteStringMozMap) {
      return mValue.mByteStringMozMap.Value();
    }
    Uninit();
    mType = eByteStringMozMap;
    return mValue.mByteStringMozMap.SetValue();
  }

  inline bool
  IsByteStringMozMap() const
  {
    return mType == eByteStringMozMap;
  }

  inline MozMap<nsCString>&
  GetAsByteStringMozMap()
  {
    MOZ_ASSERT(IsByteStringMozMap(), "Wrong type!");
    return mValue.mByteStringMozMap.Value();
  }

  inline const MozMap<nsCString>&
  GetAsByteStringMozMap() const
  {
    MOZ_ASSERT(IsByteStringMozMap(), "Wrong type!");
    return mValue.mByteStringMozMap.Value();
  }

  inline void
  Uninit()
  {
    switch (mType) {
      case eUninitialized: {
        break;
      }
      case eHeaders: {
        DestroyHeaders();
        break;
      }
      case eByteStringSequenceSequence: {
        DestroyByteStringSequenceSequence();
        break;
      }
      case eByteStringMozMap: {
        DestroyByteStringMozMap();
        break;
      }
    }
  }

  bool
  ToJSVal(JSContext* cx, JS::Handle<JSObject*> scopeObj, JS::MutableHandle<JS::Value> rval) const;

private:
  inline void
  DestroyHeaders()
  {
    MOZ_ASSERT(IsHeaders(), "Wrong type!");
    mValue.mHeaders.Destroy();
    mType = eUninitialized;
  }

  inline void
  DestroyByteStringSequenceSequence()
  {
    MOZ_ASSERT(IsByteStringSequenceSequence(), "Wrong type!");
    mValue.mByteStringSequenceSequence.Destroy();
    mType = eUninitialized;
  }

  inline void
  DestroyByteStringMozMap()
  {
    MOZ_ASSERT(IsByteStringMozMap(), "Wrong type!");
    mValue.mByteStringMozMap.Destroy();
    mType = eUninitialized;
  }
};


class OwningHeadersOrByteStringSequenceSequenceOrByteStringMozMap : public AllOwningUnionBase
{
  friend void ImplCycleCollectionUnlink(OwningHeadersOrByteStringSequenceSequenceOrByteStringMozMap& aUnion);
  enum Type
  {
    eUninitialized,
    eHeaders,
    eByteStringSequenceSequence,
    eByteStringMozMap
  };

  union Value
  {
    UnionMember<OwningNonNull<mozilla::dom::Headers> > mHeaders;
    UnionMember<Sequence<Sequence<nsCString>> > mByteStringSequenceSequence;
    UnionMember<MozMap<nsCString> > mByteStringMozMap;

  };

  Type mType;
  Value mValue;

  OwningHeadersOrByteStringSequenceSequenceOrByteStringMozMap(const OwningHeadersOrByteStringSequenceSequenceOrByteStringMozMap&) = delete;
  void operator=(const OwningHeadersOrByteStringSequenceSequenceOrByteStringMozMap) = delete;
public:
  explicit inline OwningHeadersOrByteStringSequenceSequenceOrByteStringMozMap()
    : mType(eUninitialized)
  {
  }

  inline ~OwningHeadersOrByteStringSequenceSequenceOrByteStringMozMap()
  {
    Uninit();
  }

  OwningNonNull<mozilla::dom::Headers>&
  RawSetAsHeaders();

  OwningNonNull<mozilla::dom::Headers>&
  SetAsHeaders();

  bool
  TrySetToHeaders(JSContext* cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  inline bool
  IsHeaders() const
  {
    return mType == eHeaders;
  }

  inline OwningNonNull<mozilla::dom::Headers>&
  GetAsHeaders()
  {
    MOZ_ASSERT(IsHeaders(), "Wrong type!");
    return mValue.mHeaders.Value();
  }

  inline OwningNonNull<mozilla::dom::Headers> const &
  GetAsHeaders() const
  {
    MOZ_ASSERT(IsHeaders(), "Wrong type!");
    return mValue.mHeaders.Value();
  }

  Sequence<Sequence<nsCString>>&
  RawSetAsByteStringSequenceSequence();

  Sequence<Sequence<nsCString>>&
  SetAsByteStringSequenceSequence();

  bool
  TrySetToByteStringSequenceSequence(JSContext* cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  inline bool
  IsByteStringSequenceSequence() const
  {
    return mType == eByteStringSequenceSequence;
  }

  inline Sequence<Sequence<nsCString>>&
  GetAsByteStringSequenceSequence()
  {
    MOZ_ASSERT(IsByteStringSequenceSequence(), "Wrong type!");
    return mValue.mByteStringSequenceSequence.Value();
  }

  inline Sequence<Sequence<nsCString>> const &
  GetAsByteStringSequenceSequence() const
  {
    MOZ_ASSERT(IsByteStringSequenceSequence(), "Wrong type!");
    return mValue.mByteStringSequenceSequence.Value();
  }

  MozMap<nsCString>&
  RawSetAsByteStringMozMap();

  MozMap<nsCString>&
  SetAsByteStringMozMap();

  bool
  TrySetToByteStringMozMap(JSContext* cx, JS::Handle<JS::Value> value, bool& tryNext, bool passedToJSImpl = false);

  inline bool
  IsByteStringMozMap() const
  {
    return mType == eByteStringMozMap;
  }

  inline MozMap<nsCString>&
  GetAsByteStringMozMap()
  {
    MOZ_ASSERT(IsByteStringMozMap(), "Wrong type!");
    return mValue.mByteStringMozMap.Value();
  }

  inline MozMap<nsCString> const &
  GetAsByteStringMozMap() const
  {
    MOZ_ASSERT(IsByteStringMozMap(), "Wrong type!");
    return mValue.mByteStringMozMap.Value();
  }

  void
  Uninit();

  bool
  ToJSVal(JSContext* cx, JS::Handle<JSObject*> scopeObj, JS::MutableHandle<JS::Value> rval) const;

  void
  TraceUnion(JSTracer* trc);

private:
  void
  DestroyHeaders();

  void
  DestroyByteStringSequenceSequence();

  void
  DestroyByteStringMozMap();
};


namespace HeadersBinding {

  typedef mozilla::dom::Headers NativeType;

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  JSObject*
  DefineDOMInterface(JSContext* aCx, JS::Handle<JSObject*> aGlobal, JS::Handle<jsid> id, bool aDefineOnGlobal);

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::Headers* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, T* aObject, JS::Handle<JSObject*> aGivenProto)
  {
    JS::Rooted<JSObject*> reflector(aCx);
    return Wrap(aCx, aObject, aObject, aGivenProto, &reflector) ? reflector.get() : nullptr;
  }

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  JS::Handle<JSObject*>
  GetProtoObjectHandle(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

  JS::Handle<JSObject*>
  GetConstructorObjectHandle(JSContext* aCx, JS::Handle<JSObject*> aGlobal, bool aDefineOnGlobal = true);

  JSObject*
  GetConstructorObject(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

} // namespace HeadersBinding



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_HeadersBinding_h
