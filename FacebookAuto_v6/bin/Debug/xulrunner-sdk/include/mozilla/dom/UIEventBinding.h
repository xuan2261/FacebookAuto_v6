/* THIS FILE IS AUTOGENERATED FROM UIEvent.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_UIEventBinding_h
#define mozilla_dom_UIEventBinding_h

#include "EventBinding.h"
#include "UIEventBinding.h"
#include "js/RootingAPI.h"
#include "jspubtd.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"
#include "nsGlobalWindow.h"

class nsGlobalWindow;

namespace mozilla {
namespace dom {

struct EventModifierInitAtoms;
struct NativePropertyHooks;
class ProtoAndIfaceCache;
class UIEvent;
struct UIEventAtoms;
struct UIEventInitAtoms;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct UIEventInit : public EventInit
{
  int32_t mDetail;
  nsRefPtr<nsGlobalWindow> mView;

  UIEventInit();

  explicit inline UIEventInit(const FastDictionaryInitializer& )
    : EventInit(FastDictionaryInitializer())
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline UIEventInit(const UIEventInit& aOther)
  {
    *this = aOther;
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const UIEventInit& aOther);

private:
  static bool
  InitIds(JSContext* cx, UIEventInitAtoms* atomsCache);
};

namespace binding_detail {
struct FastUIEventInit : public UIEventInit
{
  inline FastUIEventInit()
    : UIEventInit(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct EventModifierInit : public UIEventInit
{
  bool mAltKey;
  bool mCtrlKey;
  bool mMetaKey;
  bool mModifierAltGraph;
  bool mModifierCapsLock;
  bool mModifierFn;
  bool mModifierFnLock;
  bool mModifierNumLock;
  bool mModifierOS;
  bool mModifierScrollLock;
  bool mModifierSymbol;
  bool mModifierSymbolLock;
  bool mShiftKey;

  EventModifierInit();

  explicit inline EventModifierInit(const FastDictionaryInitializer& )
    : UIEventInit(FastDictionaryInitializer())
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline EventModifierInit(const EventModifierInit& aOther)
  {
    *this = aOther;
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const EventModifierInit& aOther);

private:
  static bool
  InitIds(JSContext* cx, EventModifierInitAtoms* atomsCache);
};

namespace binding_detail {
struct FastEventModifierInit : public EventModifierInit
{
  inline FastEventModifierInit()
    : EventModifierInit(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


namespace UIEventBinding {

  typedef mozilla::dom::UIEvent NativeType;

  // We declare this as an array so that retrieving a pointer to this
  // binding's property hooks only requires compile/link-time resolvable
  // address arithmetic.  Declaring it as a pointer instead would require
  // doing a run-time load to fetch a pointer to this binding's property
  // hooks.  And then structures which embedded a pointer to this structure
  // would require a run-time load for proper initialization, which would
  // then induce static constructors.  Lots of static constructors.
  extern const NativePropertyHooks sNativePropertyHooks[];

  JSObject*
  DefineDOMInterface(JSContext* aCx, JS::Handle<JSObject*> aGlobal, JS::Handle<jsid> id, bool aDefineOnGlobal);

  const JSClass*
  GetJSClass();

  bool
  Wrap(JSContext* aCx, mozilla::dom::UIEvent* aObject, nsWrapperCache* aCache, JS::Handle<JSObject*> aGivenProto, JS::MutableHandle<JSObject*> aReflector);

  template <class T>
  inline JSObject* Wrap(JSContext* aCx, T* aObject, JS::Handle<JSObject*> aGivenProto)
  {
    JS::Rooted<JSObject*> reflector(aCx);
    return Wrap(aCx, aObject, aObject, aGivenProto, &reflector) ? reflector.get() : nullptr;
  }

  void
  CreateInterfaceObjects(JSContext* aCx, JS::Handle<JSObject*> aGlobal, ProtoAndIfaceCache& aProtoAndIfaceCache, bool aDefineOnGlobal);

  JS::Handle<JSObject*>
  GetProtoObjectHandle(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

  JSObject*
  GetProtoObject(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

  JS::Handle<JSObject*>
  GetConstructorObjectHandle(JSContext* aCx, JS::Handle<JSObject*> aGlobal, bool aDefineOnGlobal = true);

  JSObject*
  GetConstructorObject(JSContext* aCx, JS::Handle<JSObject*> aGlobal);

} // namespace UIEventBinding



} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_UIEventBinding_h
