/* THIS FILE IS AUTOGENERATED FROM SettingChangeNotification.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_SettingChangeNotificationBinding_h
#define mozilla_dom_SettingChangeNotificationBinding_h

#include "js/RootingAPI.h"
#include "jspubtd.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct NativePropertyHooks;
class ProtoAndIfaceCache;
struct SettingChangeNotificationAtoms;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct SettingChangeNotification : public DictionaryBase
{
  bool mIsInternalChange;
  nsString mKey;
  JS::Value mValue;

  SettingChangeNotification();

  explicit inline SettingChangeNotification(const FastDictionaryInitializer& )
    : mValue(JS::UndefinedValue())
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

private:
  SettingChangeNotification(const SettingChangeNotification&) = delete;
  void operator=(const SettingChangeNotification) = delete;

  static bool
  InitIds(JSContext* cx, SettingChangeNotificationAtoms* atomsCache);

public:
  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);
};

namespace binding_detail {
struct FastSettingChangeNotification : public SettingChangeNotification
{
  inline FastSettingChangeNotification()
    : SettingChangeNotification(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_SettingChangeNotificationBinding_h
