/* THIS FILE IS AUTOGENERATED FROM WifiOptions.webidl BY Codegen.py - DO NOT EDIT */

#ifndef mozilla_dom_WifiOptionsBinding_h
#define mozilla_dom_WifiOptionsBinding_h

#include "js/RootingAPI.h"
#include "jspubtd.h"
#include "mozilla/ErrorResult.h"
#include "mozilla/dom/BindingDeclarations.h"
#include "mozilla/dom/Nullable.h"

namespace mozilla {
namespace dom {

struct NativePropertyHooks;
class ProtoAndIfaceCache;
struct WifiCertServiceResultOptionsAtoms;
struct WifiCommandOptionsAtoms;
struct WifiResultOptionsAtoms;

} // namespace dom
} // namespace mozilla

namespace mozilla {
namespace dom {

struct WifiCertServiceResultOptions : public DictionaryBase
{
  int32_t mId;
  nsString mNickname;
  int32_t mStatus;
  uint16_t mUsageFlag;

  WifiCertServiceResultOptions();

  explicit inline WifiCertServiceResultOptions(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline WifiCertServiceResultOptions(const WifiCertServiceResultOptions& aOther)
  {
    *this = aOther;
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const WifiCertServiceResultOptions& aOther);

private:
  static bool
  InitIds(JSContext* cx, WifiCertServiceResultOptionsAtoms* atomsCache);
};

namespace binding_detail {
struct FastWifiCertServiceResultOptions : public WifiCertServiceResultOptions
{
  inline FastWifiCertServiceResultOptions()
    : WifiCertServiceResultOptions(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct WifiCommandOptions : public DictionaryBase
{
  nsString mCmd;
  int32_t mId;
  Optional<nsString> mRequest;

  WifiCommandOptions();

  explicit inline WifiCommandOptions(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline WifiCommandOptions(const WifiCommandOptions& aOther)
  {
    *this = aOther;
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const WifiCommandOptions& aOther);

private:
  static bool
  InitIds(JSContext* cx, WifiCommandOptionsAtoms* atomsCache);
};

namespace binding_detail {
struct FastWifiCommandOptions : public WifiCommandOptions
{
  inline FastWifiCommandOptions()
    : WifiCommandOptions(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


struct WifiResultOptions : public DictionaryBase
{
  int32_t mId;
  nsString mReply;
  int32_t mStatus;

  WifiResultOptions();

  explicit inline WifiResultOptions(const FastDictionaryInitializer& )
  {
    // Do nothing here; this is used by our "Fast" subclass
  }

  explicit inline WifiResultOptions(const WifiResultOptions& aOther)
  {
    *this = aOther;
  }

  bool
  Init(JSContext* cx, JS::Handle<JS::Value> val, const char* sourceDescription = "Value", bool passedToJSImpl = false);

  bool
  Init(const nsAString& aJSON);

  bool
  ToObjectInternal(JSContext* cx, JS::MutableHandle<JS::Value> rval) const;

  bool
  ToJSON(nsAString& aJSON) const;

  void
  TraceDictionary(JSTracer* trc);

  void
  operator=(const WifiResultOptions& aOther);

private:
  static bool
  InitIds(JSContext* cx, WifiResultOptionsAtoms* atomsCache);
};

namespace binding_detail {
struct FastWifiResultOptions : public WifiResultOptions
{
  inline FastWifiResultOptions()
    : WifiResultOptions(FastDictionaryInitializer())
  {
    // Doesn't matter what int we pass to the parent constructor
  }
};
} // namespace binding_detail


} // namespace dom
} // namespace mozilla

#endif // mozilla_dom_WifiOptionsBinding_h
